import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../sass/Home.module.scss'
import Header from "../components/Header"
import AdvertismentCard from "../components/AdvertismentCard"
import { AxiosProductInstance } from "../service"
import { TProductResult } from "../state/actionTypes"
import { FC, useRef, useState, useEffect, RefObject } from "react"
import ProductsSummary from "../components/ProductsSummary"
import Footer from "../components/Footer"
import useOnScreen from "../hooks/useOnScreen"
import dynamic from "next/dynamic"
import { Grid } from "@mui/material"
import SkeletonLoading from '../components/SkeletonLoading'

const Articles = dynamic(() => import("../components/Articles"));

interface IProducts {
  products: TProductResult[],
  countAll: number
}

const Home: FC<IProducts> = ({ products, countAll }) => {

  const articlesRef = useRef<HTMLDivElement>();
  const articlesRefValue = useOnScreen(articlesRef);
  const isArticlesRef = useRef(false);

  useEffect(() => {
    if (!isArticlesRef.current) {
      console.log("fire")
      isArticlesRef.current = true;
    }
  }, [articlesRefValue])

  return (
    <div className={styles.container}>
      <Head>
        <title>فروشگاه آنلاین گیاهان دارویی دست شفا</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <AdvertismentCard />
      <ProductsSummary products={products} countAll={countAll} />
      <div ref={articlesRef as RefObject<HTMLDivElement>}>
        {isArticlesRef.current && <Articles />}
        {
          !isArticlesRef.current &&
          <Grid container>
            <SkeletonLoading itemCount={3} />
          </Grid>
        }
      </div>

      <footer className={styles.footer}>
        <Footer />
      </footer>
    </div>
  )
}

export default Home;
export const getServerSideProps = async () => {
  let { data } = await AxiosProductInstance.get("GetTopFourProducts");
  let { products, count } = data;

  return {
    props: {
      products: products,
      countAll: count
    }
  }
}